###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "client<llm> Azure_openai  {\n  provider azure-openai\n  options {\n    base_url env.PROMPT_ENDPOINT\n    api_version env.AZURE_OPENAI_API_VERSION\n    api_key env.AZURE_OPENAI_API_KEY\n    temperature 0.8\n  }\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.86.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "workflow_completion.baml": "class WorkflowCompletionStatus {\n  result string\n  reason string\n}\n\nfunction DetermineWorkflowCompletionStatus(context: string, question: string) -> WorkflowCompletionStatus {\n  client \"Azure_openai\"\n  prompt #\"\n        You are a helpful DevOps engineer with expertise in Terraform, AWS and GitHub Actions. \n        Use the following log context to answer the question.\n        Context:\n        {{context}}\n        Question:\n        {{question}}\n        Give a one word error or warning reason that best summarizes. Respond only in JSON format\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n",
}

def get_baml_files():
    return file_map